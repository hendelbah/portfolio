openapi: 3.0.2
info:
  title: Clinic Web Application
  version: 1.0.0
  description: Api for accessing clinic's data
servers:
  - url: /api/v1
    description: api base path
paths:
  /users:
    head:
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/email'
      responses:
        '204':
          $ref: '#/components/responses/head'
        '404':
          $ref: '#/components/responses/emptyCollection'
    get:
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/email'
      responses:
        '200':
          description: Filtered with query filters and paginated collection of users
          headers:
            Last-Modified:
              $ref: '#/components/headers/Last-Modified'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/pagination'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/userExt'
        '404':
          $ref: '#/components/responses/emptyCollection'
    post:
      tags:
        - Users
      requestBody:
        description: Data to create new user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userExt'
      responses:
        '201':
          description: User successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userExt'
        '422':
          $ref: '#/components/responses/unprocessibleEntity'

  /users/{uuid}:
    parameters:
      - $ref: '#/components/parameters/uuid'
    head:
      tags:
        - User
      responses:
        '204':
          $ref: '#/components/responses/head'
        '404':
          $ref: '#/components/responses/notFound'
    get:
      tags:
        - User
      responses:
        '200':
          description: User object
          headers:
            Last-Modified:
              $ref: '#/components/headers/Last-Modified'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userExt'
        '404':
          $ref: '#/components/responses/notFound'
    put:
      tags:
        - User
      requestBody:
        description: Data for updating a user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      responses:
        '200':
          description: User successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userExt'
        '404':
          $ref: '#/components/responses/notFound'
        '422':
          $ref: '#/components/responses/unprocessibleEntity'
    delete:
      tags:
        - User
      responses:
        '204':
          description: User successfully deleted
        '404':
          $ref: '#/components/responses/notFound'
  /doctors:
    head:
      tags:
        - Doctors
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/fullName'
        - $ref: '#/components/parameters/noUser'
      responses:
        '204':
          $ref: '#/components/responses/head'
        '404':
          $ref: '#/components/responses/emptyCollection'
    get:
      tags:
        - Doctors
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/fullName'
        - $ref: '#/components/parameters/noUser'
      responses:
        '200':
          description: Filtered with query filters and paginated collection of doctors
          headers:
            Last-Modified:
              $ref: '#/components/headers/Last-Modified'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/pagination'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/doctorExt'
        '404':
          $ref: '#/components/responses/emptyCollection'
    post:
      tags:
        - Doctors
      requestBody:
        description: Data to create new doctor
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/doctorExt'
      responses:
        '201':
          description: Doctor successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/doctorExt'
        '422':
          $ref: '#/components/responses/unprocessibleEntity'

  /doctors/{uuid}:
    parameters:
      - $ref: '#/components/parameters/uuid'
    head:
      tags:
        - Doctor
      responses:
        '204':
          $ref: '#/components/responses/head'
        '404':
          $ref: '#/components/responses/notFound'
    get:
      tags:
        - Doctor
      responses:
        '200':
          description: Doctor object
          headers:
            Last-Modified:
              $ref: '#/components/headers/Last-Modified'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/doctorExt'
        '404':
          $ref: '#/components/responses/notFound'
    put:
      tags:
        - Doctor
      requestBody:
        description: Data for updating a doctor
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/doctor'
      responses:
        '200':
          description: Doctor successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/doctorExt'
        '404':
          $ref: '#/components/responses/notFound'
        '422':
          $ref: '#/components/responses/unprocessibleEntity'
    delete:
      tags:
        - Doctor
      responses:
        '204':
          description: Doctor successfully deleted
        '404':
          $ref: '#/components/responses/notFound'
  /patients:
    head:
      tags:
        - Patients
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/fullName'
        - $ref: '#/components/parameters/phone'
      responses:
        '204':
          $ref: '#/components/responses/head'
        '404':
          $ref: '#/components/responses/emptyCollection'
    get:
      tags:
        - Patients
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/fullName'
        - $ref: '#/components/parameters/phone'
      responses:
        '200':
          description: Filtered with query filters and paginated collection of patients
          headers:
            Last-Modified:
              $ref: '#/components/headers/Last-Modified'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/pagination'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/patient'
        '404':
          $ref: '#/components/responses/emptyCollection'
    post:
      tags:
        - Patients
      requestBody:
        description: Data to create new patient
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/patient'
                - required:
                    - full_name
                    - phone_number
                    - birthday
      responses:
        '201':
          description: Patient successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/patient'
        '422':
          $ref: '#/components/responses/unprocessibleEntity'

  /patients/{uuid}:
    parameters:
      - $ref: '#/components/parameters/uuid'
    head:
      tags:
        - Patient
      responses:
        '204':
          $ref: '#/components/responses/head'
        '404':
          $ref: '#/components/responses/notFound'
    get:
      tags:
        - Patient
      responses:
        '200':
          description: Patient object
          headers:
            Last-Modified:
              $ref: '#/components/headers/Last-Modified'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/patient'
        '404':
          $ref: '#/components/responses/notFound'
    put:
      tags:
        - Patient
      requestBody:
        description: Data for updating a patient
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/patient'
      responses:
        '200':
          description: Patient successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/patient'
        '404':
          $ref: '#/components/responses/notFound'
        '422':
          $ref: '#/components/responses/unprocessibleEntity'
    delete:
      tags:
        - Patient
      responses:
        '204':
          description: Patient successfully deleted
        '404':
          $ref: '#/components/responses/notFound'
  /appointments:
    head:
      tags:
        - Appointments
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/doctorUuid'
        - $ref: '#/components/parameters/patientUuid'
        - $ref: '#/components/parameters/doctorName'
        - $ref: '#/components/parameters/patientName'
        - $ref: '#/components/parameters/dateFrom'
        - $ref: '#/components/parameters/dateTo'
      responses:
        '204':
          $ref: '#/components/responses/head'
        '404':
          $ref: '#/components/responses/emptyCollection'
    get:
      tags:
        - Appointments
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/doctorUuid'
        - $ref: '#/components/parameters/patientUuid'
        - $ref: '#/components/parameters/doctorName'
        - $ref: '#/components/parameters/patientName'
        - $ref: '#/components/parameters/dateFrom'
        - $ref: '#/components/parameters/dateTo'
      responses:
        '200':
          description: Filtered with query filters and paginated collection of doctor-patient appointments
          headers:
            Last-Modified:
              $ref: '#/components/headers/Last-Modified'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/pagination'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/appointment'
        '404':
          $ref: '#/components/responses/emptyCollection'
    post:
      tags:
        - Appointments
      requestBody:
        description: Data to book new appointment
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/appointment'
                - required:
                    - doctor_uuid
                    - patient_uuid
                    - date
                    - time
      responses:
        '201':
          description: Appointment successfully booked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/appointment'
        '422':
          $ref: '#/components/responses/unprocessibleEntity'

  /appointments/{uuid}:
    parameters:
      - $ref: '#/components/parameters/uuid'
    head:
      tags:
        - Appointment
      responses:
        '204':
          $ref: '#/components/responses/head'
        '404':
          $ref: '#/components/responses/notFound'
    get:
      tags:
        - Appointment
      responses:
        '200':
          description: The object representing patient's appointment with a doctor
          headers:
            Last-Modified:
              $ref: '#/components/headers/Last-Modified'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/appointment'
        '404':
          $ref: '#/components/responses/notFound'
    put:
      tags:
        - Appointment
      requestBody:
        description: Data for updating booked or past appointment
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/appointment'
      responses:
        '200':
          description: Appointment successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/appointment'
        '404':
          $ref: '#/components/responses/notFound'
        '422':
          $ref: '#/components/responses/unprocessibleEntity'
    delete:
      tags:
        - Appointment
      responses:
        '204':
          description: Appointment successfully deleted
        '404':
          $ref: '#/components/responses/notFound'
  /appointments/stats:
    get:
      tags:
        - Appointments
        - Statistics
      parameters:

        - $ref: '#/components/parameters/doctorUuid'
        - $ref: '#/components/parameters/patientUuid'
        - $ref: '#/components/parameters/doctorName'
        - $ref: '#/components/parameters/patientName'
        - $ref: '#/components/parameters/dateFrom'
        - $ref: '#/components/parameters/dateTo'
      responses:
        '200':
          description: Statistics(amount and total income) on filtered with query filters collection of doctor-patient appointments
          content:
            application/json:
              schema:
                type: object
                description: appointments count and total income
                properties:
                  count:
                    type: integer
                    description: amount of appointments in filtered collection
                    minimum: 0
                    example: 153
                  income:
                    type: integer
                    description: total income of appointments in filtered collection
                    minimum: 0
                    example: 5600
components:
  headers:
    Last-Modified:
      description: The UTC date/time at which the current object or collection was modified.
      schema:
        type: string
        example: 'Wed, 22 Dec 2021 21:52:10 GMT'
  parameters:
    uuid:
      name: uuid
      in: path
      description: Resource uuid
      required: true
      schema:
        $ref: '#/components/schemas/uuid'
    page:
      name: page
      in: query
      description: Page number for pagination
      schema:
        type: integer
        minimum: 1
        default: 1
        example: 1
    perPage:
      name: per_page
      in: query
      description: Items per page number for pagination
      schema:
        type: integer
        minimum: 1
        default: 20
        example: 10
    email:
      name: search_email
      in: query
      description: Filter users by matching their email
      schema:
        type: string
        default: null
        example: "doctor_001@spam.ua"
    fullName:
      name: search_name
      in: query
      description: Filter doctors or patients by matching their full name
      schema:
        type: string
        default: null
        example: "евгений"
    noUser:
      name: no_user
      in: query
      description: Filter doctors with no associated user account
      schema:
        type: boolean
        default: false
        example: false
    phone:
      name: search_phone
      in: query
      description: Filter patients by matching their phone number
      schema:
        type: string
        default: null
        example: "380000000111"
    doctorUuid:
      name: doctor_uuid
      in: query
      description: Filter appointments related to a doctor with given uuid
      schema:
        allOf:
          - $ref: '#/components/schemas/uuid'
          - default: null
    patientUuid:
      name: patient_uuid
      in: query
      description: Filter appointments related to a patient with given uuid
      schema:
        allOf:
          - $ref: '#/components/schemas/uuid'
          - default: null
    doctorName:
      name: doctor_name
      in: query
      description: Filter appointments related to a doctor with full name matching this parameter
      schema:
        type: string
        default: null
        example: "антон"
    patientName:
      name: doctor_name
      in: query
      description: Filter appointments related to a patient with full name matching this parameter
      schema:
        type: string
        default: null
        example: "игорь"
    dateFrom:
      name: date_from
      in: query
      description: Filter appointments starting from the date(inclusive)
      schema:
        type: string
        format: date
        default: null
        example: '2021-10-27'
    dateTo:
      name: date_to
      in: query
      description: Filter appointments before the date(inclusive)
      schema:
        type: string
        format: date
        default: null
        example: '2021-11-14'
  responses:
    head:
      description: Headers of resource, includes Last-modified
      headers:
        Last-Modified:
          $ref: '#/components/headers/Last-Modified'
    notFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/notFound'
    emptyCollection:
      description: Collection with applied filters are empty
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/notFound'
    unprocessibleEntity:
      description: Invalid request data
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              errors:
                type: object
          examples:
            validationError:
              summary: Validation Error
              description: Marshmallow validator throws validation errors on request data
              value: {
                "message": "Data is invalid",
                "errors": {
                  "email": [ "Missing data for required field." ]
                }
              }
            doctorValueError:
              summary: doctor_uuid not found
              description: No doctor with such uuid to associate with current object
              value: {
                'message': 'Error occurred during processing request data',
                'ValueError': 'Invalid doctor_uuid'
              }
            patientValueError:
              summary: patient_uuid not found
              description: No patient with such uuid to associate with current object
              value: {
                'message': 'Error occurred during processing request data',
                'ValueError': 'Invalid patient_uuid'
              }
            integrityError:
              summary: Database error
              description: Sent data violates database constraints
              value: {
                'message': 'Error occurred during processing request data',
                'IntegrityError': "Duplicate entry 'doctor_001@spam.ua' for key 'ix_user_email'"
              }
  schemas:
    notFound:
      type: object
      properties:
        message:
          type: string
          example: The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.
    uuid:
      type: string
      maxLength: 36
      readOnly: true
      example: 'cf401a20-feda-4964-84c8-6d4ae9a4909f'
      description: uuid of resource
    pagination:
      type: object
      description: Paginated representation of a collection of objects. Part of
        that collection is stored in `items` property.
      readOnly: true
      properties:
        page:
          type: integer
          minimum: 1
          example: 6
          description: current page number
        per_page:
          type: integer
          minimum: 1
          example: 10
          description: number of items per one page
        pages:
          type: integer
          minimum: 1
          example: 6
          description: amount of availiable pages
        total:
          type: integer
          minimum: 1
          example: 53
          description: total amount of items in given collection
        has_prev:
          type: boolean
          example: true
          description: true if previous page is availiable(page > 1)
        has_next:
          type: boolean
          example: false
          description: true if next page is availiable(page < pages)
    user:
      type: object
      description: User object
      properties:
        uuid:
          $ref: '#/components/schemas/uuid'
        email:
          type: string
          format: email
          maxLength: 80
          description: user's email
        password_hash:
          type: string
          maxLength: 127
          example: 'pbkdf2:sha256:260000$rdRtSdZwesxOlHxj$10ed542631a07f6fd3a11523dc774b4de8207abb1891967fda8dc5bcce9f15e6'
          description: hash of user's password
        is_admin:
          type: boolean
          example: false
          description: whether user has admin privileges
        doctor_uuid:
          type: string
          maxLength: 36
          nullable: true
          writeOnly: true
          example: 'cf401a20-feda-4964-84c8-6d4ae9a4909f'
          description: uuid of related doctor
    userExt:
      allOf:
        - $ref: '#/components/schemas/user'
        - properties:
            doctor:
              allOf:
                - readOnly: true
                  nullable: True
                - $ref: '#/components/schemas/doctor'
          required:
            - email
            - password_hash
            - is_admin
    doctor:
      type: object
      description: Doctor object
      properties:
        uuid:
          $ref: '#/components/schemas/uuid'
        full_name:
          type: string
          maxLength: 127
          example: 'Andrew James Smith'
          description: doctor's full name
        speciality:
          type: string
          maxLength: 255
          example: 'Therapist'
          description: description of doctor's speciality
        info:
          type: string
          maxLength: 1023
          description: information for patients about doctor
        experience_years:
          type: integer
          example: 15
          description: years of doctor's work experience
    doctorExt:
      allOf:
        - $ref: '#/components/schemas/doctor'
        - properties:
            user:
              allOf:
                - readOnly: true
                  nullable: true
                - $ref: '#/components/schemas/user'
          required:
            - full_name
            - speciality
            - info
            - experience_years
    patient:
      type: object
      description: Patient object
      properties:
        uuid:
          $ref: '#/components/schemas/uuid'
        full_name:
          type: string
          maxLength: 127
          example: 'Paul Wiliam Black'
          description: patient's full name
        phone_number:
          type: string
          maxLength: 20
          example: '380123456789'
          description: patient's personal phone number
        birthday:
          type: string
          format: date
          example: '1994-08-27'
          description: patient's date of birth
    appointment:
      type: object
      description: Object representing an appointment in clinic
      properties:
        uuid:
          $ref: '#/components/schemas/uuid'
        doctor_uuid:
          type: string
          maxLength: 36
          writeOnly: true
          example: '09659f1a-62e6-4c6e-8df4-f91d062ec18a'
          description: uuid of related doctor
        patient_uuid:
          type: string
          maxLength: 36
          writeOnly: true
          example: 'b5760628-f8e5-4440-bd9c-476c557a4874'
          description: uuid of related patient
        date:
          type: string
          format: date
          example: '2022-01-11'
          description: date of appointment
        time:
          type: string
          format: time
          example: '11:00:00'
          description: time of appointment
        conclusion:
          type: string
          nullable: true
          maxLength: 511
          example: 'Diagnosis: Common cold'
          description: doctor's conclusion about patient's condition
        prescription:
          type: string
          nullable: true
          maxLength: 511
          example: 'Panadol 500mg'
          description: doctor's prescription for patient
        bill:
          type: integer
          nullable: true
          minimum: 0
          example: 500
          description: doctor's prescription for patient
        doctor:
          allOf:
            - readOnly: true
            - $ref: '#/components/schemas/doctor'
        patient:
          allOf:
            - readOnly: true
            - $ref: '#/components/schemas/patient'
  securitySchemes:
    apiKey:
      type: apiKey
      name: api-key
      in: header
      description: API key to authorize requests. If running app with development config, you can use `qwerty`
security:
  - apiKey: [ ]